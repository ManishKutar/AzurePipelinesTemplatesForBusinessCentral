parameters:
- name: acceptOutdatedImages
  type: boolean
  default: true
- name: dockerMemory
  type: string
  default: 4g
- name: dockerIsolation
  type: string
  default: hyperv
  values: 
  - hyperv
  - process
- name: organizationName
  type: string
  default: ''
- name: mainAppFolder
  type: string
  default: MainApp
- name: testAppFolder
  type: string
  default: TestApp
- name: masterBranch
  type: string
  default: WIP
- name: appVersionSelection
  type: string
  default: manifest
  values:
  - manifest
  - dockerImageMajorMinorAndManifestMajorMinor
  - dockerImageMajorMinorAndManifestBuildRevision
  - manual
- name: appVersion
  type: string
  default: '0.0.0.0'
- name: manifestVersionMismatchAction
  type: string
  default: error
  values:
  - error
  - warning
  - none
- name: appReleaseVersionSelection
  type: string
  default: manifestBuildRevision
  values:
  - manifestMajorMinor
  - manifestBuildRevision
  - manual
- name: appReleaseVersion
  type: string
  default: ''

- name: failCompilationOnWarnings
  type: boolean
  default: true
 
- name: testType
  type: string
  default: none
  values:
  - none
  - sameApp
  - testApp
- name: testFilter
  type: string
  default: ''
- name: installALTestTool   #bc14 ir žemesnėm nurodom false
  type: boolean
  default: true
- name: failedTestAction
  type: string
  default: Warning
  values:
  - Warning
  - Error
  - Ignore
  
- name: eInvoice
  type: boolean
  default: false
- name: S4LESSEE
  type: boolean
  default: false
- name: latestSofteraBalticLoggingAppPath
  type: string
  default: ''
- name: latestCoreAppPath 
  type: string
  default: ''
- name: latestHRAppPath 
  type: string
  default: ''
- name: latestTimeScheduleAppPath 
  type: string
  default: ''
- name: latestTimeEmployeeTimeAppPath 
  type: string
  default: ''
- name: latestSalaryAppPath 
  type: string
  default: ''
- name: latestLBCAlnaCoreAppPath
  type: string
  default: ''

stages:
- stage: Main
  displayName: Main
  jobs:
  - job: Main
    variables:
    - name: AcceptOutdatedImages
      value: ${{ parameters.acceptOutdatedImages }}
    - name: DockerMemory
      value: ${{ parameters.dockerMemory }}
    - name: DockerIsolation
      value: ${{ parameters.dockerIsolation }}
    - name: MasterBranch
      value: ${{ parameters.masterBranch }}
    - name: IsPullRequest
      value: $[ ne(variables['System.PullRequest.PullRequestId'], '') ]
    - name: AppVersion
      value: ''
    - name: AppReleaseVersion
      value: ''
    - name: MainAppFolder
      value: ${{ parameters.mainAppFolder }}
    - name: TestAppFolder
      value: ${{ parameters.testAppFolder }}
    - name: OrganizationName
      value: ${{ parameters.organizationName }}
    steps:
    - powershell: |
        $ExitCode = 0
        $FreeDiskSpace = Get-PSDrive -Name C | Select-Object -ExpandProperty Free 
        if ($FreeDiskSpace -lt 10gb) {
            Write-Host -Object '##[error]There is no free disk space left. There must be atleast 10 GB.'
            $ExitCode = 1
        }
        Add-Type -AssemblyName Microsoft.VisualBasic
        $ComputerInfo = [Microsoft.VisualBasic.Devices.ComputerInfo]::new()
        if ($ComputerInfo.AvailablePhysicalMemory -lt 4gb) {
            Write-Host -Object '##[error]There is no free memory space left. There must be atleast 4 GB.'
            $ExitCode = 1
        }
        exit($ExitCode)
      condition: always()
      displayName: Checking free disk and ram space
    
    - checkout: self
      clean: true
      
    - template: UpdateCounters.yml
      parameters:
        organization: $(OrganizationName)
        project: $(System.TeamProject)
        repository: $(Build.RepositoryName)
        branch: $(Build.SourceBranchName)

    - task: DownloadSecureFile@1
      name: DownloadBCLicense
      inputs:
        secureFile: $(BCLicense.SecureFileName)
      displayName: Download BC license

    - task: DownloadSecureFile@1
      name: DownloadBCAppSigningCertificate
      inputs:
        secureFile: $(BCAppSigningCertificateSecureFileName)
      displayName: Download certificate for BC app signing
      
#     - powershell: |
#         $BestImageName = Get-BestBCContainerImageName -imageName $env:ImageName
        
#         # 2004 is both name for image tag and for windows build
#         if ($BestImageName -notlike '*:*ltsc2019') {
#           if ($BestImageName -like '*:*') {
#             $BestImageName += '-ltsc2019'
#           } else {
#             $BestImageName += ':ltsc2019'
#           }
#         }
        
#         docker pull $BestImageName
#       displayName: Pull new image

    - task: ALOpsDockerCreate@1
      displayName: 'ALOps Docker Create'
      inputs:
        dockerregistry: $(ImageName)
        
    - task: ALOpsDockerStart@1
      inputs:
        docker_image: $(ImageName)
        accept_image_outdated: $(AcceptOutdatedImages)
        memory_gb: 4
        docker_parameters: |
          --isolation=$(DockerIsolation)
          --env ExitOnError=N
          --memory $(DockerMemory)
          --volume="$(Build.SourcesDirectory):C:\Extension"
      timeoutInMinutes: 2

    - task: ALOpsDockerWait@1
      inputs:
        search_string: 'Ready for connections!'

    - task: ALOpsLicenseImport@1
      inputs:
        usedocker: true
        license_path: '$(DownloadBCLicense.SecureFilePath)'
        print_license_info: true

    - ${{ if not(eq(parameters.latestSofteraBalticLoggingAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Softera Baltic Logging)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestSofteraBalticLoggingAppPath }}
          nav_artifact_app_filter: '*.app'

    - ${{ if not(eq(parameters.latestCoreAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Core)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestCoreAppPath }}
          nav_artifact_app_filter: '*.app'

    - ${{ if not(eq(parameters.latestHRAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (HR)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestHRAppPath }}
          nav_artifact_app_filter: '*.app'

    - ${{ if not(eq(parameters.latestTimeScheduleAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Time-Schedule)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestTimeScheduleAppPath }}
          nav_artifact_app_filter: '*.app'

    - ${{ if not(eq(parameters.latestTimeEmployeeTimeAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Time-Employee-Time)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestTimeEmployeeTimeAppPath }}
          nav_artifact_app_filter: '*.app'
          
    - ${{ if not(eq(parameters.latestSalaryAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Salary)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestSalaryAppPath }}
          nav_artifact_app_filter: '*.app'
    
    - ${{ if not(eq(parameters.latestLBCAlnaCoreAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Core)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestLBCAlnaCoreAppPath }}
          nav_artifact_app_filter: '*.app'

    - powershell: |
        Set-StrictMode -Version Latest
        
        $SecurePassword = ConvertTo-SecureString -String $env:BCInsider_Password -AsPlainText -Force
        $Credential = New-Object -TypeName pscredential -ArgumentList $env:BCInsider_UserName, $SecurePassword
        
        # TODO: pull ManifestAppVersion, DockerImageVersion and maybe platform version outside because it duplicates with app copying to filestorage code
        [version]$CustomAppVersion = $env:CustomAppVersion
        [version]$ManifestAppVersion = `
          Get-Content -Path $(MainAppFolder)/app.json |
          ConvertFrom-Json |
          Select-Object -ExpandProperty version
        [version]$DockerImageVersion = `
          Get-BCContainerImageLabels -imageName $env:ImageName -registryCredential $credential |
          Select-Object -ExpandProperty version
          
        Write-Host -Object "Custom app version:   $CustomAppVersion"
        Write-Host -Object "Docker image version: $DockerImageVersion"
        Write-Host -Object "Manifest app version: $ManifestAppVersion"
        
        [version]$SelectedAppVersion = `
          switch ($env:AppVersionSelection) {
            'manifest' {
              Write-Host -Object "Using app version from app manifest."
              [string]$ManifestAppVersion
            }
            'dockerImageMajorMinorAndManifestMajorMinor' {
              Write-Host -Object "Creating app version using Docker image major-minor version and app manifest major-minor version."
              '{0}.{1}.{2}.{3}' -f
                $DockerImageVersion.Major, $DockerImageVersion.Minor,
                $ManifestAppVersion.Major, $ManifestAppVersion.Minor
            }
            'dockerImageMajorMinorAndManifestBuildRevision' {
              Write-Host -Object "Creating app version using Docker image major-minor version and app manifest build-revision version."
              '{0}.{1}.{2}.{3}' -f
                $DockerImageVersion.Major, $DockerImageVersion.Minor,
                $ManifestAppVersion.Build, $ManifestAppVersion.Revision
            }
            'manual' {
              Write-Host -Object "Using custom app version."
              $CustomAppVersion
            }
          }
        Write-Host -Object "Selected app version: $SelectedAppVersion."
        Write-Host -Object "##vso[task.setvariable variable=AppVersion;]$SelectedAppVersion"
        
        if ($ManifestAppVersion.Major -ne $SelectedAppVersion.Major -or `
          $ManifestAppVersion.Minor -notin @(0, $SelectedAppVersion.Minor) -or `
          $ManifestAppVersion.Build -ne $SelectedAppVersion.Build -and `
          $ManifestAppVersion.Revision -ne $SelectedAppVersion.Revision)
        {
          if ($ManifestVersionMismatchAction -in @('warning', 'error')) {
            Write-Warning -Message "Manifest app version does not match selected app version."
          }
          if ($ManifestVersionMismatchAction -eq 'error') {
            exit(1)
          }
        }
        
        $CustomAppReleaseVersion = $env:CustomAppReleaseVersion
        Write-Host -Object "Custom app release version: $CustomAppReleaseVersion"
        $SelectedAppReleaseVersion = `
          switch ($env:AppReleaseVersionSelection) {
            'manifestMajorMinor' {
              Write-Host -Object "Creating app release version using app manifest major-minor version."
              '{0}.{1}' -f
                $ManifestAppVersion.Major, $ManifestAppVersion.Minor
            }
            'manifestBuildRevision' {
              Write-Host -Object "Creating app release version using app manifest build-revision version."
              '{0}.{1}' -f
                $ManifestAppVersion.Build, $ManifestAppVersion.Revision
            }
            'manual' {
              Write-Host -Object "Using custom app release version."
              $CustomAppReleaseVersion
            }
          }
        Write-Host -Object "Selected app release version: $SelectedAppReleaseVersion."
        Write-Host -Object "##vso[task.setvariable variable=AppReleaseVersion;]$SelectedAppReleaseVersion"
      env:
        AppVersionSelection: ${{ parameters.appVersionSelection }}
        CustomAppVersion: ${{ parameters.appVersion }}
        manifestVersionMismatchAction: ${{ parameters.manifestVersionMismatchAction }}
        AppReleaseVersionSelection: ${{ parameters.appReleaseVersionSelection }}
        CustomAppReleaseVersion: ${{ parameters.appReleaseVersion }}
        BCInsider_UserName: $(BCInsiderUserName)
        BCInsider_Password: $(BCInsiderPassword)
      displayName: Get App Version
      
    - ${{ if not(eq(parameters.testType, 'none')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'ALOps Install AL TestTool'
        inputs:
          usedocker: true
          installaltesttool: true
          skip_verification: true
          install_al_app_names: |
           Tests-TestLibraries
           System Application Test
           System Application Test Library
           Any
           Library Assert
           Test Runner
    
    - task: ALOpsAppCompiler@1
      displayName: 'Compile Extension'
      inputs:
        usedocker: true
        targetproject: '$(MainAppFolder)/app.json'
        failed_on_warnings: ${{ parameters.failCompilationOnWarnings }}
        nav_app_version: $(AppVersion)

    - task: ALOpsAppSign@1
      displayName: 'ALOps App Sign'
      env:
        pfx_password: $(BCAppSigningCertificatePassword)
      inputs:
        usedocker: true
        nav_artifact_app_filter: '*.app'
        pfx_path: $(DownloadBCAppSigningCertificate.SecureFilePath)
        timestamp_uri: 'http://timestamp.comodoca.com/authenticode' 
      
    - ${{ if eq(parameters.eInvoice, true) }}:  
      - task: ALOpsDockerExec@1
        inputs:
          inline_script: 'Copy-Item -Path C:\Extension\MainApp\.netpackages\OmnivaConnector.dll -Destination (Resolve-Path -Path ''C:\Program Files\Microsoft Dynamics NAV\*\Service\Add-ins\'').ProviderPath'

    - ${{ if eq(parameters.S4LESSEE, true) }}: 
      - task: ALOpsDockerExec@1
        inputs:
          inline_script: |
            New-Item -ItemType Directory -Path SofteraFiles
            Invoke-WebRequest -Uri https://www.nuget.org/api/v2/package/ClosedXML/0.88.0-beta1 -OutFile SofteraFiles\ClosedXML.zip
            Expand-Archive -Path SofteraFiles\ClosedXML.zip -DestinationPath SofteraFiles\ClosedXML
            Copy-Item -Path SofteraFiles\ClosedXML\lib\net452\*.dll -Destination (Resolve-Path -Path 'C:\Program Files\Microsoft Dynamics NAV\*\Service\Add-ins\').ProviderPath

            Invoke-WebRequest -Uri  https://www.nuget.org/api/v2/package/DocumentFormat.OpenXml/2.7.2 -OutFile SofteraFiles\DocumentFormat.zip
            Expand-Archive -Path SofteraFiles\DocumentFormat.zip -DestinationPath SofteraFiles\DocumentFormat
            Copy-Item -Path SofteraFiles\DocumentFormat\lib\net46\*.dll -Destination (Resolve-Path -Path 'C:\Program Files\Microsoft Dynamics NAV\*\Service\Add-ins\').ProviderPath

            #Copy-Item -Path C:\edoc\MainApp\.netpackages\*.dll -Destination (Resolve-Path -Path 'C:\Program Files\Microsoft Dynamics NAV\*\Service\Add-ins\').ProviderPath
    
    - task: ALOpsAppPublish@1
      displayName: 'Publish AL-App'
      inputs:
        usedocker: true
        nav_artifact_app_filter: '*.app'  
        
    - ${{ if eq(parameters.testType, 'testApp') }}:      
      - task: ALOpsAppCompiler@1
        displayName: 'Compile Test Extension'
        inputs:
          usedocker: true
          targetproject: '$(TestAppFolder)/app.json'
          failed_on_warnings: ${{ parameters.failCompilationOnWarnings }}
          nav_app_version: $(AppVersion)
      - task: ALOpsAppPublish@1
        displayName: 'Publish Test AL-App'
        inputs:
          usedocker: true
          nav_artifact_app_filter: '*.test*.app' 
          skip_verification: true
    
    - ${{ if not(eq(parameters.testType, 'none')) }}:
      - ${{ if parameters.installALTestTool }}:
        - task: ALOpsAppTest@1
          displayName: 'ALOps Run TestSuite'
          inputs:
            usedocker: true
            import_action: "Skip"
            import_testtoolkit: false
            testpage: '130455'
            testsuite: 'DEFAULT'
            failed_test_action: ${{ parameters.failedTestAction }} 
          continueOnError: true
      - ${{ if not(parameters.installALTestTool) }}:
        - task: ALOpsAppTest@1
          displayName: 'ALOps Run TestSuite'
          inputs:
            usedocker: true
            import_action: "Skip"
            import_testtoolkit: false
            testpage: '130455'
            testsuite: 'DEFAULT'
            testfilter: ${{ parameters.testFilter }}
            failed_test_action: ${{ parameters.failedTestAction }} 
          continueOnError: true
      - task: PublishTestResults@2
        displayName: 'Publish Test Results **/TestResults.xml'
        inputs:
          testResultsFormat: XUnit
          testResultsFiles: '**/TestResults.xml'
          testRunTitle: 'BC Test Results: $(Build.BuildId)'
          
    - task: ALOpsDockerRemove@1
      displayName: 'Remove Docker Container'
      enabled: true
      condition: always()

    - powershell: |
        Set-StrictMode -Version Latest
        $SecurePassword = ConvertTo-SecureString -String $env:BCInsider_Password -AsPlainText -Force
        $Credential = New-Object -TypeName pscredential -ArgumentList $env:BCInsider_UserName, $SecurePassword
        $DockerVersion = (Get-BCContainerImageLabels -imageName $env:ImageName -registryCredential $Credential).version
        $BranchName = `
            if ($env:IsPullRequest -eq 'false') {
                $env:Build_SourceBranchName
            } else {
                $env:System_PullRequest_TargetBranch -replace 'refs/heads/', ''
            }

        $CommonPath = "\\filestorage\Projects\DevOps\$env:OrganizationName\$env:System_TeamProject\$env:Build_Repository_Name\$env:AppReleaseVersion\$env:AppVersion\$BranchName-$DockerVersion"
        $TempPath = "$CommonPath-Temporary-$env:Build_BuildID"
        if ([System.IO.Directory]::Exists($TempPath)) {
            throw "TempPath ($TempPath) already exist"
        }

        New-Item -ItemType Directory -Path $TempPath -Force
        Copy-Item -Path * -Destination $TempPath -Recurse

        $OldPath = "$CommonPath-Old"
        if ([System.IO.Directory]::Exists($OldPath)) {
            Remove-Item -Path $OldPath -Recurse -Force
        }

        $Path = $CommonPath
        if ([System.IO.Directory]::Exists($Path)) {
            New-Item -ItemType Directory -Path $OldPath -Force
            Copy-Item -Path $Path\* -Destination $OldPath -Recurse
            Remove-Item -Path $Path -Recurse -Force
        }
        if (-not ([System.IO.Directory]::Exists($path))) {
            Copy-Item -Path $TempPath -Destination $Path -Recurse
            Remove-Item  -Path $TempPath -Recurse -Force
        }
      condition: and(succeeded(), not(startsWith(variables['Build.SourceBranchName'], variables['MasterBranch'])), not(eq(variables['Build.Reason'], 'PullRequest')))
      env:
        BCInsider_UserName: $(BCInsiderUserName)
        BCInsider_Password: $(BCInsiderPassword)
        AppReleaseVersion: $(AppReleaseVersion)
      displayName: Copy files to \\filestorage
    condition: or(startsWith(variables['Build.SourceBranchName'], variables['MasterBranch']), startsWith(variables['Build.SourceBranchName'], variables['merge']), startsWith(variables['Build.SourceVersionMessage'], 'Merge WIP to Release-'))
