parameters:
- name: acceptOutdatedImages
  type: boolean
  default: true
- name: dockerIsolation
  type: string
  default: hyperv
  values: 
  - hyperv
  - process
- name: masterBranch
  type: string
  default: WIP
- name: appVersion
  type: string
  default: ''

stages:
- stage: Main
  displayName: Main
  jobs:
  - job: Main
    variables:
    - group: BC Common Variables
    - name: AcceptOutdatedImages
      value: ${{ parameters.acceptOutdatedImages }}
    - name: DockerIsolation
      value: ${{ parameters.dockerIsolation }}
    - name: MasterBranch
      value: ${{ parameters.masterBranch }}
    - name: IsPullRequest
      value: $[ ne(variables['System.PullRequest.PullRequestId'], '') ]
    - name: AppVersion
      value: ${{ parameters.appVersion }}
    steps:
    - checkout: self
      clean: true
    - powershell: echo UpdateCounters
    - powershell: echo DownloadSecureFile
    - powershell: echo DownloadSecureFile
    - powershell: |
        $BestImageName = Get-BestBCContainerImageName -imageName $env:ImageName
        docker pull $BestImageName
      displayName: Pull new image
    - powershell: echo ALOpsDockerStart
    - powershell: echo ALOpsDockerWait
    - powershell: echo ALOpsLicenseImport
    - powershell: Write-Host "##vso[task.setvariable variable=AppVersion;]$((Get-Content -Path $env:MainAppFolder/app.json | ConvertFrom-Json).version)"
      displayName: Get App Version
    - powershell: echo ALOpsAppCompiler
    - powershell: echo ALOpsAppSign
    - powershell: echo ALOpsAppPublish  
    - powershell: echo PublishTestResults
    - powershell: echo ALOpsDockerRemove
    - powershell: |
        Set-StrictMode -Version Latest
        $securepassword = convertto-securestring -string $env:BCInsider_Password -AsPlainText -force
        $credential = [pscredential]::new($env:BCInsider_UserName, $securepassword)
        $DockerVersion = (GET-NAVCONTAINERimagelabels $env:ImageName -registryCredential $credential).version
        $BranchName = if($env:IsPullRequest -eq 'false') {$env:Build_SourceBranchName} else {$env:System_PullRequest_TargetBranch -replace 'refs/heads/', ''}
        $CommonPath = "\\filestorage\Projects\DevOps\$(OrganizationName)\$env:System_TeamProject\$env:Build_Repository_Name\$BranchName-$DockerVersion\$env:AppVersion"
        $TempPath = "$CommonPath-Temporary-$env:Build_BuildID"
        if ([System.IO.Directory]::Exists($TempPath)) {
            throw "TempPath ($TempPath) already exist"
        }

        New-Item -itemtype directory -path $TempPath -force
        copy-item -path * -destination $TempPath -recurse

        $OldPath =  "$CommonPath-Old"
        if([System.IO.Directory]::Exists($OldPath)) {
            remove-item $OldPath -recurse -force
        }
        
        $Path = $CommonPath
        if ([System.IO.Directory]::Exists($path)) {
            new-item -itemtype directory -path $OldPath -force
            copy-item -path $Path\* -destination $OldPath -recurse
            remove-item $Path -Recurse -Force
        }
        if (-Not ([System.IO.Directory]::Exists($path))) {
            copy-item -path $TempPath -destination $Path -recurse
            remove-item  -path $TempPath -recurse -force
        }
      condition: and(succeeded(), not(startsWith(variables['Build.SourceBranchName'], variables['MasterBranch'])))
      env:
        BCInsider_UserName: $(BCInsiderUserName)
        BCInsider_Password: $(BCInsiderPassword)
      displayName: Copy files to \\filestorage
