parameters:
- name: acceptOutdatedImages
  type: boolean
  default: true
- name: dockerMemory
  type: string
  default: 4g
- name: dockerIsolation
  type: string
  default: hyperv
  values: 
  - hyperv
  - process
- name: masterBranch
  type: string
  default: WIP
- name: appVersion
  type: string
  default: ''
  
- name: failCompilationOnWarnings
  type: boolean
  default: true
 
- name: testType
  type: string
  default: none
  values:
  - none
  - sameApp
  - testApp
- name: testFilter
  type: string
  default: ''
- name: installALTestTool   #bc14 ir žemesnėm nurodom false
  type: boolean
  default: true
- name: failedTestAction
  type: string
  default: Warning
  values:
  - Warning
  - Error
  - Ignore
  
- name: eInvoice
  type: boolean
  default: false
- name: S4LESSEE
  type: boolean
  default: false
- name: latestSofteraBalticLoggingAppPath
  type: string
  default: ''
- name: latestCoreAppPath 
  type: string
  default: ''
- name: latestHRAppPath 
  type: string
  default: ''
- name: latestTimeScheduleAppPath 
  type: string
  default: ''
- name: latestTimeEmployeeTimeAppPath 
  type: string
  default: ''
- name: latestSalaryAppPath 
  type: string
  default: ''

stages:
- stage: Main
  displayName: Main
  jobs:
  - job: Main
    variables:
    - name: AcceptOutdatedImages
      value: ${{ parameters.acceptOutdatedImages }}
    - name: DockerMemory
      value: ${{ parameters.dockerMemory }}
    - name: DockerIsolation
      value: ${{ parameters.dockerIsolation }}
    - name: MasterBranch
      value: ${{ parameters.masterBranch }}
    - name: IsPullRequest
      value: $[ ne(variables['System.PullRequest.PullRequestId'], '') ]
    - name: AppVersion
      value: ${{ parameters.appVersion }}
    steps:
    - powershell: |
        $ExitCode = 0
        $FreeDiskSpace = Get-PSDrive -Name C | Select-Object -ExpandProperty Free 
        if ($FreeDiskSpace -lt 10gb) {
            Write-Host -Object '##[error]There is no free disk space left. There must be atleast 10 GB.'
            $ExitCode = 1
        }
        Add-Type -AssemblyName Microsoft.VisualBasic
        $ComputerInfo = [Microsoft.VisualBasic.Devices.ComputerInfo]::new()
        if ($ComputerInfo.AvailablePhysicalMemory -lt 4gb) {
            Write-Host -Object '##[error]There is no free memory space left. There must be atleast 4 GB.'
            $ExitCode = 1
        }
        exit($ExitCode)
      condition: always()
      displayName: Checking free disk and ram space
    
    - checkout: self
      clean: true
      
    - template: UpdateCounters.yml
      parameters:
        organization: $(OrganizationName)
        project: $(System.TeamProject)
        repository: $(Build.RepositoryName)
        branch: $(Build.SourceBranchName)

    - task: DownloadSecureFile@1
      name: DownloadBCLicense
      inputs:
        secureFile: $(BCLicense.SecureFileName)
      displayName: Download BC license

    - task: DownloadSecureFile@1
      name: DownloadBCAppSigningCertificate
      inputs:
        secureFile: $(BCAppSigningCertificateSecureFileName)
      displayName: Download certificate for BC app signing
      
    - powershell: |
        $BestImageName = Get-BestBCContainerImageName -imageName $env:ImageName
        
        # 2004 is both name for image tag and for windows build
        if ($BestImageName -notlike '*:*ltsc2019') {
          if ($BestImageName -like '*:*') {
            $BestImageName += '-ltsc2019'
          } else {
            $BestImageName += ':ltsc2019'
          }
        }
        
        docker pull $BestImageName
      displayName: Pull new image

    - task: ALOpsDockerStart@1
      inputs:
        docker_image: $(ImageName)
        accept_image_outdated: $(AcceptOutdatedImages)
        memory_gb: 4
        docker_parameters: |
          --isolation=$(DockerIsolation)
          --env ExitOnError=N
          --memory $(DockerMemory)
      timeoutInMinutes: 2

    - task: ALOpsDockerWait@1
      inputs:
        search_string: 'Ready for connections!'

    - task: ALOpsLicenseImport@1
      inputs:
        usedocker: true
        license_path: '$(DownloadBCLicense.SecureFilePath)'
        print_license_info: true

    - ${{ if not(eq(parameters.latestSofteraBalticLoggingAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Softera Baltic Logging)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestSofteraBalticLoggingAppPath }}
          nav_artifact_app_filter: '*.app'

    - ${{ if not(eq(parameters.latestCoreAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Core)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestCoreAppPath }}
          nav_artifact_app_filter: '*.app'

    - ${{ if not(eq(parameters.latestHRAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (HR)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestHRAppPath }}
          nav_artifact_app_filter: '*.app'

    - ${{ if not(eq(parameters.latestTimeScheduleAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Time-Schedule)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestTimeScheduleAppPath }}
          nav_artifact_app_filter: '*.app'

    - ${{ if not(eq(parameters.latestTimeEmployeeTimeAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Time-Employee-Time)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestTimeEmployeeTimeAppPath }}
          nav_artifact_app_filter: '*.app'
          
    - ${{ if not(eq(parameters.latestSalaryAppPath, '')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'Publish AL-App (Salary)'
        inputs:
          usedocker: true
          artifact_path: ${{ parameters.latestSalaryAppPath }}
          nav_artifact_app_filter: '*.app'

    - powershell: Write-Host "##vso[task.setvariable variable=AppVersion;]$((Get-Content -Path $env:MainAppFolder/app.json | ConvertFrom-Json).version)"
      displayName: Get App Version
      
    - ${{ if not(eq(parameters.testType, 'none')) }}:
      - task: ALOpsAppPublish@1
        displayName: 'ALOps Install AL TestTool'
        inputs:
          usedocker: true
          installaltesttool: true
          skip_verification: true
          install_al_app_names: |
           Tests-TestLibraries
           System Application Test
           System Application Test Library
           Any
           Library Assert
           Test Runner

    - task: ALOpsAppCompiler@1
      displayName: 'Compile Extension'
      inputs:
        usedocker: true
        targetproject: '$(MainAppFolder)/app.json'
        failed_on_warnings: ${{ parameters.failCompilationOnWarnings }}
        nav_app_version: $(AppVersion)

    - task: ALOpsAppSign@1
      displayName: 'ALOps App Sign'
      env:
        pfx_password: $(BCAppSigningCertificatePassword)
      inputs:
        usedocker: true
        nav_artifact_app_filter: '*.app'
        pfx_path: $(DownloadBCAppSigningCertificate.SecureFilePath)
        timestamp_uri: 'http://timestamp.comodoca.com/authenticode' 
      
    - ${{ if eq(parameters.eInvoice, true) }}:  
      - task: ALOpsDockerExec@1
        inputs:
          inline_script: 'Copy-Item -Path C:\edoc\MainApp\.netpackages\OmnivaConnector.dll -Destination (Resolve-Path -Path ''C:\Program Files\Microsoft Dynamics NAV\*\Service\Add-ins\'').ProviderPath'

    - ${{ if eq(parameters.S4LESSEE, true) }}: 
      - task: ALOpsDockerExec@1
        inputs:
          inline_script: |
            New-Item -ItemType Directory -Path SofteraFiles
            Invoke-WebRequest -Uri https://www.nuget.org/api/v2/package/ClosedXML/0.88.0-beta1 -OutFile SofteraFiles\ClosedXML.zip
            Expand-Archive -Path SofteraFiles\ClosedXML.zip -DestinationPath SofteraFiles\ClosedXML
            Copy-Item -Path SofteraFiles\ClosedXML\lib\net452\*.dll -Destination (Resolve-Path -Path 'C:\Program Files\Microsoft Dynamics NAV\*\Service\Add-ins\').ProviderPath

            Invoke-WebRequest -Uri  https://www.nuget.org/api/v2/package/DocumentFormat.OpenXml/2.7.2 -OutFile SofteraFiles\DocumentFormat.zip
            Expand-Archive -Path SofteraFiles\DocumentFormat.zip -DestinationPath SofteraFiles\DocumentFormat
            Copy-Item -Path SofteraFiles\DocumentFormat\lib\net46\*.dll -Destination (Resolve-Path -Path 'C:\Program Files\Microsoft Dynamics NAV\*\Service\Add-ins\').ProviderPath

            #Copy-Item -Path C:\edoc\MainApp\.netpackages\*.dll -Destination (Resolve-Path -Path 'C:\Program Files\Microsoft Dynamics NAV\*\Service\Add-ins\').ProviderPath
  
    - task: ALOpsAppPublish@1
      displayName: 'Publish AL-App'
      inputs:
        usedocker: true
        nav_artifact_app_filter: '*.app'  
        
    - ${{ if eq(parameters.testType, 'testApp') }}:      
      - task: ALOpsAppCompiler@1
        displayName: 'Compile Test Extension'
        inputs:
          usedocker: true
          targetproject: '$(TestAppFolder)/app.json'
          failed_on_warnings: ${{ parameters.failCompilationOnWarnings }}
          nav_app_version: $(AppVersion)
      - task: ALOpsAppPublish@1
        displayName: 'Publish Test AL-App'
        inputs:
          usedocker: true
          nav_artifact_app_filter: '*.test*.app' 
          skip_verification: true
    
    - ${{ if not(eq(parameters.testType, 'none')) }}:
      - ${{ if parameters.installALTestTool }}:
        - task: ALOpsAppTest@1
          displayName: 'ALOps Run TestSuite'
          inputs:
            usedocker: true
            import_action: "Skip"
            import_testtoolkit: false
            testpage: '130455'
            testsuite: 'DEFAULT'
            failed_test_action: ${{ parameters.failedTestAction }} 
          continueOnError: true
      - ${{ if not(parameters.installALTestTool) }}:
        - task: ALOpsAppTest@1
          displayName: 'ALOps Run TestSuite'
          inputs:
            usedocker: true
            import_action: "Skip"
            import_testtoolkit: false
            testpage: '130455'
            testsuite: 'DEFAULT'
            testfilter: ${{ parameters.testFilter }}
            failed_test_action: ${{ parameters.failedTestAction }} 
          continueOnError: true
      - task: PublishTestResults@2
        displayName: 'Publish Test Results **/TestResults.xml'
        inputs:
          testResultsFormat: XUnit
          testResultsFiles: '**/TestResults.xml'
          testRunTitle: 'BC Test Results: $(Build.BuildId)'
          
    - task: ALOpsDockerRemove@1
      displayName: 'Remove Docker Container'
      enabled: true
      condition: always()

    - powershell: |
        Set-StrictMode -Version Latest
        $securepassword = convertto-securestring -string $env:BCInsider_Password -AsPlainText -force
        $credential = [pscredential]::new($env:BCInsider_UserName, $securepassword)
        $DockerVersion = (GET-NAVCONTAINERimagelabels $env:ImageName -registryCredential $credential).version
        $BranchName = if($env:IsPullRequest -eq 'false') {$env:Build_SourceBranchName} else {$env:System_PullRequest_TargetBranch -replace 'refs/heads/', ''}
        $CommonPath = "\\filestorage\Projects\DevOps\$(OrganizationName)\$env:System_TeamProject\$env:Build_Repository_Name\$BranchName-$DockerVersion\$env:AppVersion"
        $TempPath = "$CommonPath-Temporary-$env:Build_BuildID"
        if ([System.IO.Directory]::Exists($TempPath)) {
            throw "TempPath ($TempPath) already exist"
        }

        New-Item -itemtype directory -path $TempPath -force
        copy-item -path * -destination $TempPath -recurse

        $OldPath =  "$CommonPath-Old"
        if([System.IO.Directory]::Exists($OldPath)) {
            remove-item $OldPath -recurse -force
        }
        
        $Path = $CommonPath
        if ([System.IO.Directory]::Exists($path)) {
            new-item -itemtype directory -path $OldPath -force
            copy-item -path $Path\* -destination $OldPath -recurse
            remove-item $Path -Recurse -Force
        }
        if (-Not ([System.IO.Directory]::Exists($path))) {
            copy-item -path $TempPath -destination $Path -recurse
            remove-item  -path $TempPath -recurse -force
        }
      condition: and(succeeded(), not(startsWith(variables['Build.SourceBranchName'], variables['MasterBranch'])))
      env:
        BCInsider_UserName: $(BCInsiderUserName)
        BCInsider_Password: $(BCInsiderPassword)
      displayName: Copy files to \\filestorage
